/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CatPooServer_H
#define CatPooServer_H

#include <thrift/TDispatchProcessor.h>
#include "server_types.h"



class CatPooServerIf {
 public:
  virtual ~CatPooServerIf() {}
  virtual void setServoSpeed(const int32_t index, const int32_t speed) = 0;
  virtual void activateServo(const int32_t index, const int32_t direction) = 0;
  virtual void takePicture(const int32_t index, const std::string& filename) = 0;
};

class CatPooServerIfFactory {
 public:
  typedef CatPooServerIf Handler;

  virtual ~CatPooServerIfFactory() {}

  virtual CatPooServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CatPooServerIf* /* handler */) = 0;
};

class CatPooServerIfSingletonFactory : virtual public CatPooServerIfFactory {
 public:
  CatPooServerIfSingletonFactory(const boost::shared_ptr<CatPooServerIf>& iface) : iface_(iface) {}
  virtual ~CatPooServerIfSingletonFactory() {}

  virtual CatPooServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CatPooServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<CatPooServerIf> iface_;
};

class CatPooServerNull : virtual public CatPooServerIf {
 public:
  virtual ~CatPooServerNull() {}
  void setServoSpeed(const int32_t /* index */, const int32_t /* speed */) {
    return;
  }
  void activateServo(const int32_t /* index */, const int32_t /* direction */) {
    return;
  }
  void takePicture(const int32_t /* index */, const std::string& /* filename */) {
    return;
  }
};

typedef struct _CatPooServer_setServoSpeed_args__isset {
  _CatPooServer_setServoSpeed_args__isset() : index(false), speed(false) {}
  bool index;
  bool speed;
} _CatPooServer_setServoSpeed_args__isset;

class CatPooServer_setServoSpeed_args {
 public:

  CatPooServer_setServoSpeed_args() : index(0), speed(0) {
  }

  virtual ~CatPooServer_setServoSpeed_args() throw() {}

  int32_t index;
  int32_t speed;

  _CatPooServer_setServoSpeed_args__isset __isset;

  void __set_index(const int32_t val) {
    index = val;
  }

  void __set_speed(const int32_t val) {
    speed = val;
  }

  bool operator == (const CatPooServer_setServoSpeed_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(speed == rhs.speed))
      return false;
    return true;
  }
  bool operator != (const CatPooServer_setServoSpeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatPooServer_setServoSpeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatPooServer_setServoSpeed_pargs {
 public:


  virtual ~CatPooServer_setServoSpeed_pargs() throw() {}

  const int32_t* index;
  const int32_t* speed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatPooServer_setServoSpeed_result__isset {
  _CatPooServer_setServoSpeed_result__isset() : e(false) {}
  bool e;
} _CatPooServer_setServoSpeed_result__isset;

class CatPooServer_setServoSpeed_result {
 public:

  CatPooServer_setServoSpeed_result() {
  }

  virtual ~CatPooServer_setServoSpeed_result() throw() {}

  CatPooServerException e;

  _CatPooServer_setServoSpeed_result__isset __isset;

  void __set_e(const CatPooServerException& val) {
    e = val;
  }

  bool operator == (const CatPooServer_setServoSpeed_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CatPooServer_setServoSpeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatPooServer_setServoSpeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatPooServer_setServoSpeed_presult__isset {
  _CatPooServer_setServoSpeed_presult__isset() : e(false) {}
  bool e;
} _CatPooServer_setServoSpeed_presult__isset;

class CatPooServer_setServoSpeed_presult {
 public:


  virtual ~CatPooServer_setServoSpeed_presult() throw() {}

  CatPooServerException e;

  _CatPooServer_setServoSpeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CatPooServer_activateServo_args__isset {
  _CatPooServer_activateServo_args__isset() : index(false), direction(false) {}
  bool index;
  bool direction;
} _CatPooServer_activateServo_args__isset;

class CatPooServer_activateServo_args {
 public:

  CatPooServer_activateServo_args() : index(0), direction(0) {
  }

  virtual ~CatPooServer_activateServo_args() throw() {}

  int32_t index;
  int32_t direction;

  _CatPooServer_activateServo_args__isset __isset;

  void __set_index(const int32_t val) {
    index = val;
  }

  void __set_direction(const int32_t val) {
    direction = val;
  }

  bool operator == (const CatPooServer_activateServo_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const CatPooServer_activateServo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatPooServer_activateServo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatPooServer_activateServo_pargs {
 public:


  virtual ~CatPooServer_activateServo_pargs() throw() {}

  const int32_t* index;
  const int32_t* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatPooServer_activateServo_result__isset {
  _CatPooServer_activateServo_result__isset() : e(false) {}
  bool e;
} _CatPooServer_activateServo_result__isset;

class CatPooServer_activateServo_result {
 public:

  CatPooServer_activateServo_result() {
  }

  virtual ~CatPooServer_activateServo_result() throw() {}

  CatPooServerException e;

  _CatPooServer_activateServo_result__isset __isset;

  void __set_e(const CatPooServerException& val) {
    e = val;
  }

  bool operator == (const CatPooServer_activateServo_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CatPooServer_activateServo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatPooServer_activateServo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatPooServer_activateServo_presult__isset {
  _CatPooServer_activateServo_presult__isset() : e(false) {}
  bool e;
} _CatPooServer_activateServo_presult__isset;

class CatPooServer_activateServo_presult {
 public:


  virtual ~CatPooServer_activateServo_presult() throw() {}

  CatPooServerException e;

  _CatPooServer_activateServo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CatPooServer_takePicture_args__isset {
  _CatPooServer_takePicture_args__isset() : index(false), filename(false) {}
  bool index;
  bool filename;
} _CatPooServer_takePicture_args__isset;

class CatPooServer_takePicture_args {
 public:

  CatPooServer_takePicture_args() : index(0), filename() {
  }

  virtual ~CatPooServer_takePicture_args() throw() {}

  int32_t index;
  std::string filename;

  _CatPooServer_takePicture_args__isset __isset;

  void __set_index(const int32_t val) {
    index = val;
  }

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const CatPooServer_takePicture_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const CatPooServer_takePicture_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatPooServer_takePicture_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CatPooServer_takePicture_pargs {
 public:


  virtual ~CatPooServer_takePicture_pargs() throw() {}

  const int32_t* index;
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatPooServer_takePicture_result__isset {
  _CatPooServer_takePicture_result__isset() : e(false) {}
  bool e;
} _CatPooServer_takePicture_result__isset;

class CatPooServer_takePicture_result {
 public:

  CatPooServer_takePicture_result() {
  }

  virtual ~CatPooServer_takePicture_result() throw() {}

  CatPooServerException e;

  _CatPooServer_takePicture_result__isset __isset;

  void __set_e(const CatPooServerException& val) {
    e = val;
  }

  bool operator == (const CatPooServer_takePicture_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CatPooServer_takePicture_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatPooServer_takePicture_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CatPooServer_takePicture_presult__isset {
  _CatPooServer_takePicture_presult__isset() : e(false) {}
  bool e;
} _CatPooServer_takePicture_presult__isset;

class CatPooServer_takePicture_presult {
 public:


  virtual ~CatPooServer_takePicture_presult() throw() {}

  CatPooServerException e;

  _CatPooServer_takePicture_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CatPooServerClient : virtual public CatPooServerIf {
 public:
  CatPooServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CatPooServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setServoSpeed(const int32_t index, const int32_t speed);
  void send_setServoSpeed(const int32_t index, const int32_t speed);
  void recv_setServoSpeed();
  void activateServo(const int32_t index, const int32_t direction);
  void send_activateServo(const int32_t index, const int32_t direction);
  void recv_activateServo();
  void takePicture(const int32_t index, const std::string& filename);
  void send_takePicture(const int32_t index, const std::string& filename);
  void recv_takePicture();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CatPooServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CatPooServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CatPooServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setServoSpeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_activateServo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_takePicture(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CatPooServerProcessor(boost::shared_ptr<CatPooServerIf> iface) :
    iface_(iface) {
    processMap_["setServoSpeed"] = &CatPooServerProcessor::process_setServoSpeed;
    processMap_["activateServo"] = &CatPooServerProcessor::process_activateServo;
    processMap_["takePicture"] = &CatPooServerProcessor::process_takePicture;
  }

  virtual ~CatPooServerProcessor() {}
};

class CatPooServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CatPooServerProcessorFactory(const ::boost::shared_ptr< CatPooServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CatPooServerIfFactory > handlerFactory_;
};

class CatPooServerMultiface : virtual public CatPooServerIf {
 public:
  CatPooServerMultiface(std::vector<boost::shared_ptr<CatPooServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CatPooServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CatPooServerIf> > ifaces_;
  CatPooServerMultiface() {}
  void add(boost::shared_ptr<CatPooServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setServoSpeed(const int32_t index, const int32_t speed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setServoSpeed(index, speed);
    }
    ifaces_[i]->setServoSpeed(index, speed);
  }

  void activateServo(const int32_t index, const int32_t direction) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->activateServo(index, direction);
    }
    ifaces_[i]->activateServo(index, direction);
  }

  void takePicture(const int32_t index, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->takePicture(index, filename);
    }
    ifaces_[i]->takePicture(index, filename);
  }

};



#endif

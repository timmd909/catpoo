/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef server_TYPES_H
#define server_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _CatPooServerException__isset {
  _CatPooServerException__isset() : details(false) {}
  bool details;
} _CatPooServerException__isset;

class CatPooServerException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  CatPooServerException() : details() {
  }

  virtual ~CatPooServerException() throw() {}

  std::string details;

  _CatPooServerException__isset __isset;

  void __set_details(const std::string& val) {
    details = val;
    __isset.details = true;
  }

  bool operator == (const CatPooServerException & rhs) const
  {
    if (__isset.details != rhs.__isset.details)
      return false;
    else if (__isset.details && !(details == rhs.details))
      return false;
    return true;
  }
  bool operator != (const CatPooServerException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatPooServerException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CatPooServerException &a, CatPooServerException &b);



#endif
